# Damit ioBroker mit Redis arbeiten kann, muss zuvor eine reguläre ioBroker-Instanz mit jsonl-Datenbank angelegt werden.
# Wenn der ioBroker dann eingerichtet ist, kann mit dem Umstieg auf Redis begonnen werden.
# 
# 1. Dieses Docker-Compose-File ausführen (ioBroker-Standard-Installation + neue Redis-Instanz)
# 2. Wenn ioBroker vollständig hochgefahren ist, diesen über die Container-CLI beenden -> 'docker exec -it iobroker bash' -> 'pkill -u iobroker'
# 3. 'iob setup custom' ausführen und die Schritte mit den Standardeinstellungen für Redis durchlaufen -> r=Redis | IP=127.0.0.1 | Port=6379 | Master/Slave, je nach bestehendem Setup, idr. Master
# 4. Nach erfolgreichem Import der jsonl nach Redis, mit 'docker-compose down' die container beenden und danach das Dokcer-Compose-File im Ordner iobroker+Redis starten
# 5. Fertig!

version: "3.3"
services:
  iobroker:
    container_name: iobroker
    image: buanet/iobroker:${IOBROKER_VERSION}
    hostname: ${IOBROKER_HOSTNAME}
    restart: unless-stopped
    network_mode: "host"
    environment:
      - USBDEVICES=
      - TZ=Europe/Berlin
      - ZWAVE=false
      - AVAHI=false
      - IOB_STATESDB_TYPE=redis
      - IOB_STATESDB_PORT=6379
      - IOB_STATESDB_HOST=127.0.0.1
      - IOB_OBJECTSDB_TYPE=redis
      - IOB_OBJECTSDB_PORT=6379
      - IOB_OBJECTSDB_HOST=127.0.0.1
      - IOB_STATESDB_PASS= #leave this empty
      - IOB_MULTIHOST=master
      - IOB_ADMINPORT=8081
      - SETGID=1000
      - SETUID=1000
    volumes:
      - '${IOBROKER_PATH}:/opt/iobroker:rw'
    depends_on:
      - redis
 
  redis:
      image: 'bitnami/redis:latest'
      hostname: redis
      container_name: iobroker-redis
      restart: unless-stopped
      user: '1000'  
      network_mode: "host"
      volumes:
          - '${IOBROKER_REDIS_PATH}:/bitnami:rw'
      environment:
          - REDIS_IO_THREADS_DO_READS=yes
          - REDIS_IO_THREADS=4
          - REDIS_PASSWORD= #leave this empty
          - ALLOW_EMPTY_PASSWORD=yes

